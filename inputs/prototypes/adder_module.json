"\n\n`timescale 1ns / 1ns\n\n// \u5b8f\u5b9a\u4e49\u6570\u636e\u5bbd\u5ea6\u548c\u5730\u5740\u5bbd\u5ea6\n\n`define AMOUNT python-amount // \u7ea7\u8054\u52a0\u6cd5\u5668\u7684\u6570\u91cf\n`define ADDR_WIDTH 4// \u5730\u5740\u5bbd\u5ea6\n`define BW  python-BW - 1 // \u7ea7\u8054\u52a0\u6cd5\u5668\u7684\u4f4d\u5bbd\n\nmodule adder(\n    input clk, // \u52a0\u5165\u65f6\u949f\u4fe1\u53f7\n    input rst_n, // \u590d\u4f4d\u4fe1\u53f7\uff0c\u4f4e\u7535\u5e73\u6709\u6548\n    input [`BW - 1:0] a,\n    input [`BW - 1:0] b,\n    output reg [`BW - 1:0] sum // \u58f0\u660e\u4e3a reg \u7c7b\u578b\u4ee5\u5728 always \u5757\u4e2d\u8d4b\u503c\n);\n\n    // \u4f7f\u7528\u65f6\u949f\u8fb9\u6cbf\u548c\u590d\u4f4d\u4fe1\u53f7\u63a7\u5236\u903b\u8f91\n    always @(posedge clk or negedge rst_n) begin\n        if (!rst_n) // \u5982\u679c\u590d\u4f4d\u4fe1\u53f7\u4e3a\u4f4e\u7535\u5e73\uff0c\u5219\u91cd\u7f6e sum\n            sum <= 0;\n        else\n            sum <= a + b; // \u5728\u65f6\u949f\u4e0a\u5347\u6cbf\u66f4\u65b0 sum\n    end\n\nendmodule   \n\n\nmodule rom #(\n    parameter DATA_WIDTH = `BW, // \u4f7f\u7528\u5b8f\u5b9a\u4e49\u7684\u6570\u636e\u4f4d\u5bbd\n    parameter ADDR_WIDTH = `ADDR_WIDTH  // \u4f7f\u7528\u5b8f\u5b9a\u4e49\u7684\u5730\u5740\u4f4d\u5bbd\uff0c\u51b3\u5b9a\u4e86ROM\u7684\u5927\u5c0f\n)(\n    input wire clk, // \u65f6\u949f\u4fe1\u53f7\n    input wire [ADDR_WIDTH-1:0] addr, // \u5730\u5740\u7ebf\n    output reg [DATA_WIDTH-1:0] data_out // \u8bfb\u51fa\u7684\u6570\u636e\n);\n\n// ROM\u5b58\u50a8\u5668\u6570\u7ec4\n// \u6ce8\u610f\uff1a\u5b9e\u9645ROM\u7684\u5185\u5bb9\u9700\u8981\u9884\u5148\u5b9a\u4e49\u6216\u901a\u8fc7\u521d\u59cb\u5757\u8fdb\u884c\u521d\u59cb\u5316\nreg [DATA_WIDTH-1:0] mem [(2**ADDR_WIDTH)-1:0];\n\n// \u540c\u6b65\u8bfb\u64cd\u4f5c\nalways @(posedge clk) begin\n    data_out <= mem[addr]; // \u5728\u65f6\u949f\u4e0a\u5347\u6cbf\u8bfb\u53d6\u6570\u636e\nend\n\n// \u53ef\u9009\uff1a\u521d\u59cb\u5316ROM\u5185\u5bb9\n// initial begin\n//     // \u521d\u59cb\u5316\u4ee3\u7801\uff0c\u4f8b\u5982\uff1amem[0] = 8'hFF;\n// end\n\nendmodule\n\n\nmodule top(\n    input clk,\n    input rst_n\n);\n\nwire [`BW-1:0] adder_inputs[`AMOUNT-1:0]; // \u5b58\u50a8\u6bcf\u4e2a\u52a0\u6cd5\u5668\u7684a\u8f93\u5165\nwire [`BW-1:0] adder_outputs[`AMOUNT-1:0]; // \u5b58\u50a8\u6bcf\u4e2a\u52a0\u6cd5\u5668\u7684sum\u8f93\u51fa\nwire [`BW-1:0] rom_outputs; // \u5b58\u50a8\u4eceROM\u8bfb\u53d6\u7684b\u8f93\u5165\n\n// \u5b9e\u4f8b\u5316ROM\nrom #(\n    .DATA_WIDTH(`BW),\n    .ADDR_WIDTH(`ADDR_WIDTH)\n) rom_instance (\n    .clk(clk),\n    .addr(0), // \u8fd9\u91cc\u9700\u8981\u4e00\u4e2a\u903b\u8f91\u6765\u5faa\u73af\u6216\u9012\u589e\u5730\u5740\n    .data_out(rom_outputs) // \u5047\u8bbe\u7b2c\u4e00\u4e2a\u52a0\u6cd5\u5668\u4f7f\u7528\u7684ROM\u8f93\u51fa\n);\n\ngenvar i;\ngenerate\n    for (i = 0; i < `AMOUNT; i = i + 1) begin : adders\n        // \u7b2c\u4e00\u4e2a\u52a0\u6cd5\u5668\u7684a\u8f93\u5165\u53ef\u4ee5\u662f\u5916\u90e8\u8f93\u5165\u6216\u56fa\u5b9a\u503c\n        if (i == 0) assign adder_inputs[i] = adder_inputs[`AMOUNT-1]; // \u793a\u4f8b\uff1a\u5c06\u7b2c\u4e00\u4e2a\u52a0\u6cd5\u5668\u7684a\u8f93\u5165\u8bbe\u7f6e\u4e3a0\n        \n        // \u5b9e\u4f8b\u5316\u52a0\u6cd5\u5668\n        adder adder_instance(\n            .clk(clk),\n            .rst_n(rst_n),\n            .a(adder_inputs[i]),\n            .b(rom_outputs),\n            .sum(adder_outputs[i])\n        );\n        \n        // \u5c06\u5f53\u524d\u52a0\u6cd5\u5668\u7684\u8f93\u51fa\u8fde\u63a5\u5230\u4e0b\u4e00\u4e2a\u52a0\u6cd5\u5668\u7684\u8f93\u5165\n        if (i < `AMOUNT - 1) assign adder_inputs[i + 1] = adder_outputs[i];\n    end\nendgenerate\n\nendmodule\n"